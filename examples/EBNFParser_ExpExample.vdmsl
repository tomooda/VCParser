/* autogenerated by EBNFParser */
/*
integer = ['-'], '0' | ('1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9',{'0'|'1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9'});
FACTOR = ('(',EXPR,')') | integer;
TERM = FACTOR,{MUL|DIV};
MUL='*',FACTOR;
DIV='/',FACTOR;
EXPR = TERM,{ADD|SUB};
ADD='+',TERM;
SUB='-',TERM;
*/
module ExprParser
imports from VCParser all, from EBNFParser all
exports all
definitions
functions
	integer : VCParser`SOURCE->VCParser`PARSED
	integer(string) == EBNFParser`keepNode(VCParser`label("integer", VCParser`either([VCParser`concat(VCParser`series([VCParser`option(VCParser`takeString("-")), VCParser`takeString("0")])), VCParser`either([VCParser`takeString("1"), VCParser`takeString("2"), VCParser`takeString("3"), VCParser`takeString("4"), VCParser`takeString("5"), VCParser`takeString("6"), VCParser`takeString("7"), VCParser`takeString("8"), VCParser`concat(VCParser`series([VCParser`takeString("9"), VCParser`concat(VCParser`star(VCParser`either([VCParser`takeString("0"), VCParser`takeString("1"), VCParser`takeString("2"), VCParser`takeString("3"), VCParser`takeString("4"), VCParser`takeString("5"), VCParser`takeString("6"), VCParser`takeString("7"), VCParser`takeString("8"), VCParser`takeString("9")])))]))])])))(string);
	FACTOR : VCParser`SOURCE->VCParser`PARSED
	FACTOR(string) == EBNFParser`keepNode(EBNFParser`clean(VCParser`label("FACTOR", VCParser`either([VCParser`concat(VCParser`series([VCParser`takeString("("), EXPR, VCParser`takeString(")")])), integer]))))(string);
	TERM : VCParser`SOURCE->VCParser`PARSED
	TERM(string) == EBNFParser`keepNode(EBNFParser`clean(VCParser`label("TERM", VCParser`concat(VCParser`series([FACTOR, VCParser`concat(VCParser`star(VCParser`either([MUL, DIV])))])))))(string);
	MUL : VCParser`SOURCE->VCParser`PARSED
	MUL(string) == EBNFParser`keepNode(EBNFParser`clean(VCParser`label("MUL", VCParser`concat(VCParser`series([VCParser`takeString("*"), FACTOR])))))(string);
	DIV : VCParser`SOURCE->VCParser`PARSED
	DIV(string) == EBNFParser`keepNode(EBNFParser`clean(VCParser`label("DIV", VCParser`concat(VCParser`series([VCParser`takeString("/"), FACTOR])))))(string);
	EXPR : VCParser`SOURCE->VCParser`PARSED
	EXPR(string) == EBNFParser`keepNode(EBNFParser`clean(VCParser`label("EXPR", VCParser`concat(VCParser`series([TERM, VCParser`concat(VCParser`star(VCParser`either([ADD, SUB])))])))))(string);
	ADD : VCParser`SOURCE->VCParser`PARSED
	ADD(string) == EBNFParser`keepNode(EBNFParser`clean(VCParser`label("ADD", VCParser`concat(VCParser`series([VCParser`takeString("+"), TERM])))))(string);
	SUB : VCParser`SOURCE->VCParser`PARSED
	SUB(string) == EBNFParser`keepNode(EBNFParser`clean(VCParser`label("SUB", VCParser`concat(VCParser`series([VCParser`takeString("-"), TERM])))))(string);
end ExprParser